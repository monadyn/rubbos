diff ./check_scp.xsl ../check_scp.xsl
32c32
< ssh -o StrictHostKeyChecking=no -o BatchMode=yes localhost "hostname"
---
> #ssh -o StrictHostKeyChecking=no -o BatchMode=yes localhost "hostname"
diff ./CJDBC_CONTROLLERinstall.xsl ../CJDBC_CONTROLLERinstall.xsl
51c51
< cp $OUTPUT_HOME/cjdbc_conf/controller.sh $CJDBC_HOME/bin/
---
> 
121c121
<       url="jdbc:postgresql://<xsl:value-of select="./target"/>-lan4:5432/rubbos"
---
>       url="jdbc:postgresql://<xsl:value-of select="./target"/>:5432/rubbos"
126c126
<       url="jdbc:mysql://<xsl:value-of select="./target"/>-lan4:<xsl:value-of select="//instances/params/env/param[@name='MYSQL_PORT']/@value"/>/opentaps"
---
>       url="jdbc:mysql://<xsl:value-of select="./target"/>:<xsl:value-of select="//instances/params/env/param[@name='MYSQL_PORT']/@value"/>/rubbos"
Common subdirectories: ./CVS and ../CVS
diff ./emulab_config.xsl ../emulab_config.xsl
25a26,43
> <!-- Junhee Added -->
> # Limit pc3000 Memory Capacity
> <xsl:if test="//params/dbmem-conf/param[@name='limitHighEndMem']/@value='true'">
> cd $WORK_HOME/emulab_files
> sed 's/SIZE/<xsl:value-of select="//params/dbmem-conf/param[@name='limitHighEndMem' and @value='true']/memory/@size"/>M/g' lilo_temp.conf > lilo.conf
> echo "*** limiting DB server memory *************************"
> 
> for i in<xsl:for-each select="//instances/instance[contains(@type,'db_server') and not(./target/@type='pc600')]"> "$<xsl:value-of select="@name"/>_HOST"</xsl:for-each>
> do
>   ssh $i "
>     sudo cp $WORK_HOME/emulab_files/lilo.conf /etc
>     sudo /sbin/lilo
>   " &amp;
> done
> </xsl:if>
> sleep 10
> <!-- Junhee Added End -->
> 
117,130c135,138
< </xsl:template>
< </xsl:stylesheet>
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> <!-- Junhee Added -->
> # Turning off Swap Partition
> <xsl:if test="//params/dbmem-conf/param[@name='limitHighEndMem']/@value='true'">
> echo "*** Turning off all swaps  *************************"
131a140,148
> for i in<xsl:for-each select="//instances/instance[contains(@type,'db_server') and not(./target/@type='pc600')]"> "$<xsl:value-of select="@name"/>_HOST"</xsl:for-each>
> do
>   ssh $i "
>    sudo /sbin/swapoff -a
>   " &amp;
> done
> </xsl:if>
> sleep 10
> <!-- Junhee Added End -->
132a150,151
> </xsl:template>
> </xsl:stylesheet>
Only in .: emulab_config.xsl~
diff ./MainRun2.xsl ../MainRun2.xsl
1,345c1,340
< <?xml version="1.0" ?>
< 
< <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
< 	xmlns:datetime="http://exslt.org/dates-and-times">
< 
< <xsl:output method="xml" indent="yes"/>
< 
< <xsl:template match="/" >
< <whatever>
< <xsl:copy-of select="."/> <xsl:text>  
< 
< </xsl:text>
<   <xsl:apply-templates select="/xtbl/instances" /> <xsl:text> 
< </xsl:text>
< </whatever>
< </xsl:template>
< 
< 
< 
< <xsl:template match="/xtbl/instances">
< 
< 
< <!--CREATING THE run.sh FILE-->
< <file>
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>run.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <content>
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts
< 
< 
< # Transfer all sub scripts to target hosts
< echo "*** scp scripts *************************************************"
< <xsl:for-each select="//instances/instance/action">
< scp -o StrictHostKeyChecking=no -o BatchMode=yes <xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh  $<xsl:value-of select="../@name"/>_HOST:/tmp
< </xsl:for-each>
< 
< # Install and Configure and run Apache, Tomcat, CJDBC, and MySQL
< echo "*** install scripts &amp; configure &amp; execute ***********************"
< <xsl:apply-templates select="/xtbl/instances/instance/action[contains(@type,'install') and not(contains(@type,'uninstall')) or contains(@type,'configure') or contains(@type,'_exec')]">
<   <xsl:sort select="./@seq" data-type="number"/>
< </xsl:apply-templates>
< 
< 
< <!--
< # Uninstall all
< <xsl:apply-templates select="/xtbl/instances/instance/action[contains(@type,'uninstall')]">
<   <xsl:sort select="./@seq" data-type="number"/>
< </xsl:apply-templates>
< 
< 
< # cleanup after experiments
< echo "Cleaning up ...."
< <xsl:for-each select="//instances/instance/action">
< ssh $<xsl:value-of select="../@name"/>_HOST  rm -f /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh
< </xsl:for-each>
< -->
< 
< </content>
< </file>
< 
< 
< <xsl:text> 
< </xsl:text>
< <xsl:for-each select="/xtbl/instances/instance/action">
< <xsl:text>
< </xsl:text>
< 
< <file>
< 
< <xsl:text> 
< </xsl:text>
< 
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< 
< <xsl:text> 
< </xsl:text>
< 
< <content>
< 
< <xsl:text> 
< </xsl:text>
< 
< <xsl:text disable-output-escaping="yes">&lt;pastehere id=&quot;</xsl:text><xsl:value-of select="./@template"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <xsl:text> 
< </xsl:text>
< 
< </content>
< </file>
< 
< <xsl:text>
< </xsl:text>
< </xsl:for-each>
< <xsl:text>
< </xsl:text>
< 
< 
< <file>
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>set_elba_env.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <content>
< #!/bin/bash
< 
< set -o allexport
< 
< # HOSTS
< <xsl:for-each select="//instances/instance[@type='control_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan1<br></br>
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='benchmark_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan1<br></br>
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='client_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan1<br></br>
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='web_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan1<br></br>
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='app_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan2<br></br>
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='cjdbc_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan3<br></br>
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='sequoia_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan3<br></br>
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='db_server']">
<   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/>-lan4<br></br>
< </xsl:for-each>
< # Experiment name on Emulab
< EMULAB_EXPERIMENT_NAME=<xsl:value-of select="//params/env/param[@name='EMULAB_EXPERIMENT_NAME']/@value"/>
< 
< # Directories from which files are copied
< WORK_HOME=<xsl:value-of select="//params/env/param[@name='WORK_HOME']/@value"/>
< OUTPUT_HOME=<xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< SOFTWARE_HOME=<xsl:value-of select="//params/env/param[@name='SOFTWARE_HOME']/@value"/>
< 
< # Output directory for results of RUBBoS benchmark
< RUBBOS_RESULTS_HOST=qywang@bonn.cc.gt.atl.ga.us
< RUBBOS_RESULTS_DIR_BASE=<xsl:value-of select="//params/env/param[@name='RUBBOS_RESULTS_DIR_BASE']/@value"/>
< RUBBOS_RESULTS_DIR_NAME=<xsl:value-of select="translate(datetime:dateTime(),':','')"/>
< 
< # Target directories
< ELBA_TOP=<xsl:value-of select="//params/env/param[@name='ELBA_TOP']/@value"/>
< RUBBOS_TOP=<xsl:value-of select="//params/env/param[@name='RUBBOS_TOP']/@value"/>
< TMP_RESULTS_DIR_BASE=<xsl:value-of select="//params/env/param[@name='TMP_RESULTS_DIR_BASE']/@value"/>
< RUBBOS_HOME=<xsl:value-of select="//params/env/param[@name='RUBBOS_HOME']/@value"/>
< SYSSTAT_HOME=<xsl:value-of select="//params/env/param[@name='SYSSTAT_HOME']/@value"/>
< DSTAT_TARBALL=<xsl:value-of select="//params/env/param[@name='DSTAT_TARBALL']/@value"/>
< HTTPD_HOME=<xsl:value-of select="//params/env/param[@name='HTTPD_HOME']/@value"/>
< HTTPD_INSTALL_FILES=<xsl:value-of select="//params/env/param[@name='HTTPD_INSTALL_FILES']/@value"/>
< MOD_JK_INSTALL_FILES=<xsl:value-of select="//params/env/param[@name='MOD_JK_INSTALL_FILES']/@value"/>
< CATALINA_HOME=<xsl:value-of select="//params/env/param[@name='CATALINA_HOME']/@value"/>
< CATALINA_BASE=<xsl:value-of select="//params/env/param[@name='CATALINA_BASE']/@value"/>
< CJDBC_HOME=<xsl:value-of select="//params/env/param[@name='CJDBC_HOME']/@value"/>
< OPENTAPS_HOME=<xsl:value-of select="//params/env/param[@name='OPENTAPS_HOME']/@value"/>
< <xsl:if test="//params/env/param[@name='SEQUOIA_HOME']">
< SEQUOIA_HOME=<xsl:value-of select="//params/env/param[@name='SEQUOIA_HOME']/@value"/>
< </xsl:if>
< <xsl:if test="//params/env/param[@name='MYSQL_HOME']">
< MYSQL_HOME=<xsl:value-of select="//params/env/param[@name='MYSQL_HOME']/@value"/>
< </xsl:if>
< <xsl:if test="//params/env/param[@name='POSTGRES_HOME']">
< POSTGRES_HOME=<xsl:value-of select="//params/env/param[@name='POSTGRES_HOME']/@value"/>
< POSTGRES_INSTALL_FILES=<xsl:value-of select="//params/env/param[@name='POSTGRES_INSTALL_FILES']/@value"/>
< </xsl:if>
< JONAS_ROOT=<xsl:value-of select="//params/env/param[@name='JONAS_ROOT']/@value"/>
< 
< # Java &amp; Ant
< JAVA_HOME=<xsl:value-of select="//params/env/param[@name='JAVA_HOME']/@value"/>
< JAVA_OPTS="<xsl:value-of select="//params/env/param[@name='JAVA_OPTS']/@value"/>"
< J2EE_HOME=<xsl:value-of select="//params/env/param[@name='J2EE_HOME']/@value"/>
< ANT_HOME=<xsl:value-of select="//params/env/param[@name='ANT_HOME']/@value"/>
< 
< # Tarballs
< JAVA_TARBALL=<xsl:value-of select="//params/env/param[@name='JAVA_TARBALL']/@value"/>
< J2EE_TARBALL=<xsl:value-of select="//params/env/param[@name='J2EE_TARBALL']/@value"/>
< ANT_TARBALL=<xsl:value-of select="//params/env/param[@name='ANT_TARBALL']/@value"/>
< SYSSTAT_TARBALL=<xsl:value-of select="//params/env/param[@name='SYSSTAT_TARBALL']/@value"/>
< HTTPD_TARBALL=<xsl:value-of select="//params/env/param[@name='HTTPD_TARBALL']/@value"/>
< MOD_JK_TARBALL=<xsl:value-of select="//params/env/param[@name='MOD_JK_TARBALL']/@value"/>
< TOMCAT_TARBALL=<xsl:value-of select="//params/env/param[@name='TOMCAT_TARBALL']/@value"/>
< CJDBC_TARBALL=<xsl:value-of select="//params/env/param[@name='CJDBC_TARBALL']/@value"/>
< OPENTAPS_RUBBOS_ZIP=opentaps-1.0.0_common_database.zip
< OPENTAPS_RUBBOS_DATA_TARBALL=opentaps_rubbos_data.tar.gz
< 
< <xsl:if test="//params/env/param[@name='SEQUOIA_HOME']">
< SEQUOIA_TARBALL=<xsl:value-of select="//params/env/param[@name='SEQUOIA_TARBALL']/@value"/>
< </xsl:if>
< <xsl:if test="//params/env/param[@name='MYSQL_HOME']">
< <xsl:choose>
<   <xsl:when test="//params/logging/param[@name='mysqlResponseTime']/@value='true'">
< MYSQL_TARBALL_RT=<xsl:value-of select="//params/env/param[@name='MYSQL_TARBALL_RT']/@value"/>
<   </xsl:when>
<   <xsl:otherwise>
< MYSQL_TARBALL=<xsl:value-of select="//params/env/param[@name='MYSQL_TARBALL']/@value"/>
<   </xsl:otherwise>
< </xsl:choose>
< </xsl:if>
< <xsl:if test="//params/env/param[@name='POSTGRES_HOME']">
< POSTGRES_TARBALL=<xsl:value-of select="//params/env/param[@name='POSTGRES_TARBALL']/@value"/>
< </xsl:if>
< RUBBOS_TARBALL=<xsl:value-of select="//params/env/param[@name='RUBBOS_TARBALL']/@value"/>
< RUBBOS_DATA_TARBALL=<xsl:value-of select="//params/env/param[@name='RUBBOS_DATA_TARBALL']/@value"/>
< RUBBOS_DATA_TEXTFILES_TARBALL=<xsl:value-of select="//params/env/param[@name='RUBBOS_DATA_TEXTFILES_TARBALL']/@value"/>
< 
< <xsl:if test="//params/env/param[@name='MYSQL_HOME']">
< 
< # for MySQL
< MYSQL_CONNECTOR=<xsl:value-of select="//params/env/param[@name='MYSQL_CONNECTOR']/@value"/>
< MYSQL_PORT=<xsl:value-of select="//params/env/param[@name='MYSQL_PORT']/@value"/>
< MYSQL_SOCKET=<xsl:value-of select="//params/env/param[@name='MYSQL_SOCKET']/@value"/>
< MYSQL_DATA_DIR=<xsl:value-of select="//params/env/param[@name='MYSQL_DATA_DIR']/@value"/>
< MYSQL_ERR_LOG=<xsl:value-of select="//params/env/param[@name='MYSQL_ERR_LOG']/@value"/>
< MYSQL_PID_FILE=<xsl:value-of select="//params/env/param[@name='MYSQL_PID_FILE']/@value"/>
< </xsl:if>
< 
< <xsl:if test="//params/env/param[@name='POSTGRES_HOME']">
< 
< # for PostgreSQL
< POSTGRES_CONNECTOR=<xsl:value-of select="//params/env/param[@name='POSTGRES_CONNECTOR']/@value"/>
< POSTGRES_DATA_DIR=<xsl:value-of select="//params/env/param[@name='POSTGRES_DATA_DIR']/@value"/>
< </xsl:if>
< 
< # for DBs &amp; C-JDBC
< ROOT_PASSWORD=<xsl:value-of select="//params/env/param[@name='ROOT_PASSWORD']/@value"/>
< ELBA_USER=<xsl:value-of select="//params/env/param[@name='ELBA_USER']/@value"/>
< ELBA_PASSWORD=<xsl:value-of select="//params/env/param[@name='ELBA_PASSWORD']/@value"/>
< 
< 
< CLASSPATH=$CLASSPATH:$JONAS_ROOT/bin/unix/registry:$JAVA_HOME:$JAVA_HOME/lib/tools.jar:$CATALINA_HOME/common/lib/servlet-api.jar:.
< 
< PATH=$JAVA_HOME/bin:$JONAS_ROOT/bin/unix:$ANT_HOME/bin:$CATALINA_HOME/bin:$PATH
< set +o allexport
< 
< </content>
< </file>
< 
< 
< <file>
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>nsFile.txt<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <content>
< set ns [new Simulator]
< source tb_compat.tcl
< 
< <xsl:for-each select="//instances/instance[contains(@type,'_server')]">
< set <xsl:value-of select="./target"/> [$ns node]
< tb-set-node-os $<xsl:value-of select="./target"/> FC4-RUBBoS
< tb-set-hardware $<xsl:value-of select="./target"/> pc3000
< </xsl:for-each>
< set lan1 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='control_server']"
< >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='benchmark_server']"
< >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='client_server']"
< >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='web_server']"
< >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
< set lan2 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='web_server']"
< >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='app_server']"
< >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
< <xsl:choose>
< <xsl:when test="//instances/instance[@type='cjdbc_server']"
< >set lan3 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='app_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
<   <xsl:for-each select="//instances/instance[@type='cjdbc_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
< set lan4 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='cjdbc_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
<   <xsl:for-each select="//instances/instance[@type='db_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
< </xsl:when>
< <xsl:when test="//instances/instance[@type='sequoia_server']"
< >set lan3 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='app_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
<   <xsl:for-each select="//instances/instance[@type='sequoia_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
< set lan4 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='sequoia_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
<   <xsl:for-each select="//instances/instance[@type='db_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
< </xsl:when>
< <xsl:otherwise
< >set lan4 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='app_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
<   <xsl:for-each select="//instances/instance[@type='db_server']"
<   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
< </xsl:otherwise>
< </xsl:choose>
< 
< $ns rtproto Static
< $ns run
< </content>
< </file>
< 
< 
< <file>
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>manualCleanup.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <content>
< #!/bin/bash
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< 
< echo "Uninstalling ...."
< <xsl:for-each select="//instances/instance/action[@type='uninstall']">
< ssh $<xsl:value-of select="../@name"/>_HOST /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh</xsl:for-each>
< 
< echo "Cleaning up ...."
< for i in<xsl:for-each select="//instances/instance[contains(@type, '_server') and @type!='control_server']"
< > "$<xsl:value-of select="./@name"/>_HOST"</xsl:for-each>
< do
<   ssh $i "
<     sudo \rm -r $RUBBOS_TOP
<     "
< done
< 
< <xsl:for-each select="//instances/instance/action">
< ssh $<xsl:value-of select="../@name"/>_HOST  rm -f /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh</xsl:for-each>
< 
< </content>
< </file>
< 
< </xsl:template>
< 
< 
< <xsl:template match="/xtbl/instances/instance/action">
< <xsl:text disable-output-escaping="yes">&lt;argshere type=&quot;pre-action&quot; id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; idtype=&quot;</xsl:text><xsl:value-of select="../@type"/><xsl:text disable-output-escaping="yes">&quot; actype=&quot;</xsl:text><xsl:value-of select="./@type"/><xsl:text disable-output-escaping="yes">&quot; instname=&quot;</xsl:text><xsl:value-of select="../@name"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< ssh $<xsl:value-of select="../@name"/>_HOST /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh <xsl:text disable-output-escaping="yes">&lt;argshere type=&quot;current&quot; id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; idtype=&quot;</xsl:text><xsl:value-of select="../@type"/><xsl:text disable-output-escaping="yes">&quot; actype=&quot;</xsl:text><xsl:value-of select="./@type"/><xsl:text disable-output-escaping="yes">&quot; instname=&quot;</xsl:text><xsl:value-of select="../@name"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <xsl:text disable-output-escaping="yes">&lt;argshere type=&quot;post-action&quot; id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; idtype=&quot;</xsl:text><xsl:value-of select="../@type"/><xsl:text disable-output-escaping="yes">&quot; actype=&quot;</xsl:text><xsl:value-of select="./@type"/><xsl:text disable-output-escaping="yes">&quot; instname=&quot;</xsl:text><xsl:value-of select="../@name"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< </xsl:template>
< 
< 
< </xsl:stylesheet>
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> <?xml version="1.0" ?>
> 
> <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
> 	xmlns:datetime="http://exslt.org/dates-and-times">
> 
> <xsl:output method="xml" indent="yes"/>
> 
> <xsl:template match="/" >
> <whatever>
> <xsl:copy-of select="."/> <xsl:text>  
> 
> </xsl:text>
>   <xsl:apply-templates select="/xtbl/instances" /> <xsl:text> 
> </xsl:text>
> </whatever>
> </xsl:template>
> 
> 
> 
> <xsl:template match="/xtbl/instances">
> 
> 
> <!--CREATING THE run.sh FILE-->
> <file>
> <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>run.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> <content>
> cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
> source set_elba_env.sh
> 
> cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts
> 
> 
> # Transfer all sub scripts to target hosts
> echo "*** scp scripts *************************************************"
> <xsl:for-each select="//instances/instance/action">
> scp -o StrictHostKeyChecking=no -o BatchMode=yes <xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh  $<xsl:value-of select="../@name"/>_HOST:/tmp
> </xsl:for-each>
> 
> # Install and Configure and run Apache, Tomcat, CJDBC, and MySQL
> echo "*** install scripts &amp; configure &amp; execute ***********************"
> <xsl:apply-templates select="/xtbl/instances/instance/action[contains(@type,'install') and not(contains(@type,'uninstall')) or contains(@type,'configure') or contains(@type,'_exec')]">
>   <xsl:sort select="./@seq" data-type="number"/>
> </xsl:apply-templates>
> 
> 
> <!--
> # Uninstall all
> <xsl:apply-templates select="/xtbl/instances/instance/action[contains(@type,'uninstall')]">
>   <xsl:sort select="./@seq" data-type="number"/>
> </xsl:apply-templates>
> 
> 
> # cleanup after experiments
> echo "Cleaning up ...."
> <xsl:for-each select="//instances/instance/action">
> ssh $<xsl:value-of select="../@name"/>_HOST  rm -f /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh
> </xsl:for-each>
> -->
> 
> </content>
> </file>
> 
> 
> <xsl:text> 
> </xsl:text>
> <xsl:for-each select="/xtbl/instances/instance/action">
> <xsl:text>
> </xsl:text>
> 
> <file>
> 
> <xsl:text> 
> </xsl:text>
> 
> <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> 
> <xsl:text> 
> </xsl:text>
> 
> <content>
> 
> <xsl:text> 
> </xsl:text>
> 
> <xsl:text disable-output-escaping="yes">&lt;pastehere id=&quot;</xsl:text><xsl:value-of select="./@template"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> <xsl:text> 
> </xsl:text>
> 
> </content>
> </file>
> 
> <xsl:text>
> </xsl:text>
> </xsl:for-each>
> <xsl:text>
> </xsl:text>
> 
> 
> <file>
> <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>set_elba_env.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> <content>
> #!/bin/bash
> 
> set -o allexport
> 
> # HOSTS
> <xsl:for-each select="//instances/instance[@type='control_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='benchmark_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='client_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='web_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='app_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='cjdbc_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='sequoia_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='db_server']">
>   <xsl:value-of select="./@name"/>_HOST=<xsl:value-of select="./target"/><br></br>
> </xsl:for-each>
> # Experiment name on Emulab
> EMULAB_EXPERIMENT_NAME=<xsl:value-of select="//params/env/param[@name='EMULAB_EXPERIMENT_NAME']/@value"/>
> 
> # Directories from which files are copied
> WORK_HOME=<xsl:value-of select="//params/env/param[@name='WORK_HOME']/@value"/>
> OUTPUT_HOME=<xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
> SOFTWARE_HOME=<xsl:value-of select="//params/env/param[@name='SOFTWARE_HOME']/@value"/>
> 
> # Output directory for results of RUBBoS benchmark
> RUBBOS_RESULTS_HOST=<xsl:value-of select="//params/env/param[@name='RUBBOS_RESULTS_HOST']/@value"/>
> RUBBOS_RESULTS_DIR_BASE=<xsl:value-of select="//params/env/param[@name='RUBBOS_RESULTS_DIR_BASE']/@value"/>
> RUBBOS_RESULTS_DIR_NAME=<xsl:value-of select="translate(datetime:dateTime(),':','')"/>
> 
> # Target directories
> ELBA_TOP=<xsl:value-of select="//params/env/param[@name='ELBA_TOP']/@value"/>
> RUBBOS_TOP=<xsl:value-of select="//params/env/param[@name='RUBBOS_TOP']/@value"/>
> TMP_RESULTS_DIR_BASE=<xsl:value-of select="//params/env/param[@name='TMP_RESULTS_DIR_BASE']/@value"/>
> RUBBOS_HOME=<xsl:value-of select="//params/env/param[@name='RUBBOS_HOME']/@value"/>
> SYSSTAT_HOME=<xsl:value-of select="//params/env/param[@name='SYSSTAT_HOME']/@value"/>
> HTTPD_HOME=<xsl:value-of select="//params/env/param[@name='HTTPD_HOME']/@value"/>
> HTTPD_INSTALL_FILES=<xsl:value-of select="//params/env/param[@name='HTTPD_INSTALL_FILES']/@value"/>
> MOD_JK_INSTALL_FILES=<xsl:value-of select="//params/env/param[@name='MOD_JK_INSTALL_FILES']/@value"/>
> CATALINA_HOME=<xsl:value-of select="//params/env/param[@name='CATALINA_HOME']/@value"/>
> CATALINA_BASE=<xsl:value-of select="//params/env/param[@name='CATALINA_BASE']/@value"/>
> CJDBC_HOME=<xsl:value-of select="//params/env/param[@name='CJDBC_HOME']/@value"/>
> <xsl:if test="//params/env/param[@name='SEQUOIA_HOME']">
> SEQUOIA_HOME=<xsl:value-of select="//params/env/param[@name='SEQUOIA_HOME']/@value"/>
> </xsl:if>
> <xsl:if test="//params/env/param[@name='MYSQL_HOME']">
> MYSQL_HOME=<xsl:value-of select="//params/env/param[@name='MYSQL_HOME']/@value"/>
> </xsl:if>
> <xsl:if test="//params/env/param[@name='POSTGRES_HOME']">
> POSTGRES_HOME=<xsl:value-of select="//params/env/param[@name='POSTGRES_HOME']/@value"/>
> POSTGRES_INSTALL_FILES=<xsl:value-of select="//params/env/param[@name='POSTGRES_INSTALL_FILES']/@value"/>
> </xsl:if>
> JONAS_ROOT=<xsl:value-of select="//params/env/param[@name='JONAS_ROOT']/@value"/>
> 
> # Java &amp; Ant
> JAVA_HOME=<xsl:value-of select="//params/env/param[@name='JAVA_HOME']/@value"/>
> JAVA_OPTS="<xsl:value-of select="//params/env/param[@name='JAVA_OPTS']/@value"/>"
> J2EE_HOME=<xsl:value-of select="//params/env/param[@name='J2EE_HOME']/@value"/>
> ANT_HOME=<xsl:value-of select="//params/env/param[@name='ANT_HOME']/@value"/>
> 
> # Tarballs
> JAVA_TARBALL=<xsl:value-of select="//params/env/param[@name='JAVA_TARBALL']/@value"/>
> J2EE_TARBALL=<xsl:value-of select="//params/env/param[@name='J2EE_TARBALL']/@value"/>
> ANT_TARBALL=<xsl:value-of select="//params/env/param[@name='ANT_TARBALL']/@value"/>
> SYSSTAT_TARBALL=<xsl:value-of select="//params/env/param[@name='SYSSTAT_TARBALL']/@value"/>
> HTTPD_TARBALL=<xsl:value-of select="//params/env/param[@name='HTTPD_TARBALL']/@value"/>
> MOD_JK_TARBALL=<xsl:value-of select="//params/env/param[@name='MOD_JK_TARBALL']/@value"/>
> TOMCAT_TARBALL=<xsl:value-of select="//params/env/param[@name='TOMCAT_TARBALL']/@value"/>
> CJDBC_TARBALL=<xsl:value-of select="//params/env/param[@name='CJDBC_TARBALL']/@value"/>
> <xsl:if test="//params/env/param[@name='SEQUOIA_HOME']">
> SEQUOIA_TARBALL=<xsl:value-of select="//params/env/param[@name='SEQUOIA_TARBALL']/@value"/>
> </xsl:if>
> <xsl:if test="//params/env/param[@name='MYSQL_HOME']">
> <xsl:choose>
>   <xsl:when test="//params/logging/param[@name='mysqlResponseTime']/@value='true'">
> MYSQL_TARBALL_RT=<xsl:value-of select="//params/env/param[@name='MYSQL_TARBALL_RT']/@value"/>
>   </xsl:when>
>   <xsl:otherwise>
> MYSQL_TARBALL=<xsl:value-of select="//params/env/param[@name='MYSQL_TARBALL']/@value"/>
>   </xsl:otherwise>
> </xsl:choose>
> </xsl:if>
> <xsl:if test="//params/env/param[@name='POSTGRES_HOME']">
> POSTGRES_TARBALL=<xsl:value-of select="//params/env/param[@name='POSTGRES_TARBALL']/@value"/>
> </xsl:if>
> RUBBOS_TARBALL=<xsl:value-of select="//params/env/param[@name='RUBBOS_TARBALL']/@value"/>
> RUBBOS_DATA_TARBALL=<xsl:value-of select="//params/env/param[@name='RUBBOS_DATA_TARBALL']/@value"/>
> RUBBOS_DATA_TEXTFILES_TARBALL=<xsl:value-of select="//params/env/param[@name='RUBBOS_DATA_TEXTFILES_TARBALL']/@value"/>
> 
> <xsl:if test="//params/env/param[@name='MYSQL_HOME']">
> 
> # for MySQL
> MYSQL_CONNECTOR=<xsl:value-of select="//params/env/param[@name='MYSQL_CONNECTOR']/@value"/>
> MYSQL_PORT=<xsl:value-of select="//params/env/param[@name='MYSQL_PORT']/@value"/>
> MYSQL_SOCKET=<xsl:value-of select="//params/env/param[@name='MYSQL_SOCKET']/@value"/>
> MYSQL_DATA_DIR=<xsl:value-of select="//params/env/param[@name='MYSQL_DATA_DIR']/@value"/>
> MYSQL_ERR_LOG=<xsl:value-of select="//params/env/param[@name='MYSQL_ERR_LOG']/@value"/>
> MYSQL_PID_FILE=<xsl:value-of select="//params/env/param[@name='MYSQL_PID_FILE']/@value"/>
> </xsl:if>
> 
> <xsl:if test="//params/env/param[@name='POSTGRES_HOME']">
> 
> # for PostgreSQL
> POSTGRES_CONNECTOR=<xsl:value-of select="//params/env/param[@name='POSTGRES_CONNECTOR']/@value"/>
> POSTGRES_DATA_DIR=<xsl:value-of select="//params/env/param[@name='POSTGRES_DATA_DIR']/@value"/>
> </xsl:if>
> 
> # for DBs &amp; C-JDBC
> ROOT_PASSWORD=<xsl:value-of select="//params/env/param[@name='ROOT_PASSWORD']/@value"/>
> ELBA_USER=<xsl:value-of select="//params/env/param[@name='ELBA_USER']/@value"/>
> ELBA_PASSWORD=<xsl:value-of select="//params/env/param[@name='ELBA_PASSWORD']/@value"/>
> 
> 
> CLASSPATH=$CLASSPATH:$JONAS_ROOT/bin/unix/registry:$JAVA_HOME:$JAVA_HOME/lib/tools.jar:$CATALINA_HOME/common/lib/servlet-api.jar:.
> 
> PATH=$JAVA_HOME/bin:$JONAS_ROOT/bin/unix:$ANT_HOME/bin:$CATALINA_HOME/bin:$PATH
> set +o allexport
> 
> </content>
> </file>
> 
> 
> <file>
> <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>nsFile.txt<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> <content>
> set ns [new Simulator]
> source tb_compat.tcl
> 
> <xsl:for-each select="//instances/instance[contains(@type,'_server')]">
> set <xsl:value-of select="./target"/> [$ns node]
> tb-set-node-os $<xsl:value-of select="./target"/> FC4-RUBBoS
> tb-set-hardware $<xsl:value-of select="./target"/> pc3000
> </xsl:for-each>
> set lan1 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='control_server']"
> >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='benchmark_server']"
> >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='client_server']"
> >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='web_server']"
> >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
> set lan2 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='web_server']"
> >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
> <xsl:for-each select="//instances/instance[@type='app_server']"
> >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
> <xsl:choose>
> <xsl:when test="//instances/instance[@type='cjdbc_server']"
> >set lan3 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='app_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
>   <xsl:for-each select="//instances/instance[@type='cjdbc_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
> set lan4 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='cjdbc_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
>   <xsl:for-each select="//instances/instance[@type='db_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
> </xsl:when>
> <xsl:when test="//instances/instance[@type='sequoia_server']"
> >set lan3 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='app_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
>   <xsl:for-each select="//instances/instance[@type='sequoia_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
> set lan4 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='sequoia_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
>   <xsl:for-each select="//instances/instance[@type='db_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
> </xsl:when>
> <xsl:otherwise
> >set lan4 [$ns make-lan "<xsl:for-each select="//instances/instance[@type='app_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>
>   <xsl:for-each select="//instances/instance[@type='db_server']"
>   >$<xsl:value-of select="./target"/><xsl:text> </xsl:text></xsl:for-each>" 1000Mb 0ms]
> </xsl:otherwise>
> </xsl:choose>
> 
> $ns rtproto Static
> $ns run
> </content>
> </file>
> 
> 
> <file>
> <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>manualCleanup.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> <content>
> #!/bin/bash
> 
> cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
> source set_elba_env.sh
> 
> echo "Uninstalling ...."
> <xsl:for-each select="//instances/instance/action[@type='uninstall']">
> ssh $<xsl:value-of select="../@name"/>_HOST /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh</xsl:for-each>
> 
> echo "Cleaning up ...."
> for i in<xsl:for-each select="//instances/instance[contains(@type, '_server') and @type!='control_server']"
> > "$<xsl:value-of select="./@name"/>_HOST"</xsl:for-each>
> do
>   ssh $i "
>     sudo \rm -r $RUBBOS_TOP
>     "
> done
> 
> <xsl:for-each select="//instances/instance/action">
> ssh $<xsl:value-of select="../@name"/>_HOST  rm -f /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh</xsl:for-each>
> 
> </content>
> </file>
> 
> </xsl:template>
> 
> 
> <xsl:template match="/xtbl/instances/instance/action">
> <xsl:text disable-output-escaping="yes">&lt;argshere type=&quot;pre-action&quot; id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; idtype=&quot;</xsl:text><xsl:value-of select="../@type"/><xsl:text disable-output-escaping="yes">&quot; actype=&quot;</xsl:text><xsl:value-of select="./@type"/><xsl:text disable-output-escaping="yes">&quot; instname=&quot;</xsl:text><xsl:value-of select="../@name"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> ssh $<xsl:value-of select="../@name"/>_HOST /tmp/<xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh <xsl:text disable-output-escaping="yes">&lt;argshere type=&quot;current&quot; id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; idtype=&quot;</xsl:text><xsl:value-of select="../@type"/><xsl:text disable-output-escaping="yes">&quot; actype=&quot;</xsl:text><xsl:value-of select="./@type"/><xsl:text disable-output-escaping="yes">&quot; instname=&quot;</xsl:text><xsl:value-of select="../@name"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> <xsl:text disable-output-escaping="yes">&lt;argshere type=&quot;post-action&quot; id=&quot;</xsl:text><xsl:value-of select="../@name"/>_<xsl:value-of select="./@type"/>.sh<xsl:text disable-output-escaping="yes">&quot; idtype=&quot;</xsl:text><xsl:value-of select="../@type"/><xsl:text disable-output-escaping="yes">&quot; actype=&quot;</xsl:text><xsl:value-of select="./@type"/><xsl:text disable-output-escaping="yes">&quot; instname=&quot;</xsl:text><xsl:value-of select="../@name"/><xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> </xsl:template>
> 
> 
> </xsl:stylesheet>
> 
> 
> 
> 
> 
> 
> 
> 
> 
diff ./MYSQLconfigure2.xsl ../MYSQLconfigure2.xsl
48c48
< ssh localhost "
---
> ssh $HOSTNAME "
diff ./MYSQLconfigure.xsl ../MYSQLconfigure.xsl
1,81c1,74
< <?xml version="1.0" ?>
< 
< <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
< 
< <xsl:output method="xml" indent="yes"/>
< <xsl:template match="@*|node()">
< <xsl:copy>
< <xsl:apply-templates select="@*|node()"/>
< </xsl:copy>
< </xsl:template>
< 
< <xsl:template match="//argshere[@idtype='db_server' and @actype='configure' and @type='current']"> &amp;</xsl:template>
< 
< <xsl:template match="//argshere[@idtype='db_server' and @actype='configure' and @type='pre-action']"></xsl:template>
< 
< <xsl:template match="//argshere[@idtype='db_server' and @actype='configure' and @type='post-action']">sleep 60</xsl:template>
< 
< 
< <xsl:template match="//pastehere[@id='../templates/DeployScript/MYSQLconfigure.xsl']">
< #!/bin/bash
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< <xsl:if test="//params/env/param[@name='JAVA_OPTS_DB']">
< export JAVA_OPTS=<xsl:value-of select="//params/env/param[@name='JAVA_OPTS_DB']/@value"/>
< </xsl:if>
< 
< echo "  CONFIGURING MYSQL on $HOSTNAME"
< 
< #start mysql
<   mkdir -p $MYSQL_HOME/run
<   cp $OUTPUT_HOME/mysql_conf/my.cnf $MYSQL_HOME/my.cnf
< 
<   cd $MYSQL_HOME
<   bin/safe_mysqld --no-defaults --port=$MYSQL_PORT --datadir=$MYSQL_DATA_DIR --log=$MYSQL_ERR_LOG --pid-file=$MYSQL_PID_FILE --socket=$MYSQL_SOCKET --user=root &amp;
<   sleep 3
< 
< #set password
<   bin/mysqladmin --socket=$MYSQL_SOCKET --user=root password "$ROOT_PASSWORD"
< 
< #create database &amp; set privileges
<   ssh localhost "
<     cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
<     source set_elba_env.sh
<     cd $MYSQL_HOME
<     echo 'CREATE DATABASE opentaps;'  | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD mysql
< 
<     echo 'GRANT ALL PRIVILEGES ON opentaps.* TO \"$ELBA_USER\"@\"%\" IDENTIFIED BY \"$ELBA_PASSWORD\", \"root\"@\"%\" IDENTIFIED BY \"$ROOT_PASSWORD\"; flush privileges; GRANT ALL PRIVILEGES ON opentaps.* TO \"$ELBA_USER\"@\"localhost\" IDENTIFIED BY \"$ELBA_PASSWORD\", \"root\"@\"localhost\" IDENTIFIED BY \"$ROOT_PASSWORD\"; flush privileges;' | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD mysql
< 
<     echo 'CREATE DATABASE rubbos;'  | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD mysql
< 
<     echo 'GRANT ALL PRIVILEGES ON rubbos.* TO \"$ELBA_USER\"@\"%\" IDENTIFIED BY \"$ELBA_PASSWORD\", \"root\"@\"%\" IDENTIFIED BY \"$ROOT_PASSWORD\"; flush privileges; GRANT ALL PRIVILEGES ON rubbos.* TO \"$ELBA_USER\"@\"localhost\" IDENTIFIED BY \"$ELBA_PASSWORD\", \"root\"@\"localhost\" IDENTIFIED BY \"$ROOT_PASSWORD\"; flush privileges;' | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD mysql
<   "
< 
< #stop mysql
<   bin/mysqladmin --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD shutdown
< 
< # copy rubbos data files
<   tar xzvf /mnt/softwares/$OPENTAPS_RUBBOS_DATA_TARBALL --directory=$MYSQL_HOME/data/opentaps
<   sleep 5
< 
<   tar xzf $SOFTWARE_HOME/$RUBBOS_DATA_TARBALL --directory=$MYSQL_HOME/data/rubbos
<   sleep 5
< 
< echo "  DONE CONFIGURING MYSQL on $HOSTNAME"
< 
< <file>
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>my.cnf<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/mysql_conf<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <content>
< [client]
< port = 3306
< 
< [mysqld]
< server-id=1
< </content>
< </file>
< 
< </xsl:template>
< 
< </xsl:stylesheet>
< 
---
> <?xml version="1.0" ?>
> 
> <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
> 
> <xsl:output method="xml" indent="yes"/>
> <xsl:template match="@*|node()">
> <xsl:copy>
> <xsl:apply-templates select="@*|node()"/>
> </xsl:copy>
> </xsl:template>
> 
> <xsl:template match="//argshere[@idtype='db_server' and @actype='configure' and @type='current']"> &amp;</xsl:template>
> 
> <xsl:template match="//argshere[@idtype='db_server' and @actype='configure' and @type='pre-action']"></xsl:template>
> 
> <xsl:template match="//argshere[@idtype='db_server' and @actype='configure' and @type='post-action']">sleep 60</xsl:template>
> 
> 
> <xsl:template match="//pastehere[@id='../templates/DeployScript/MYSQLconfigure.xsl']">
> #!/bin/bash
> 
> cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
> source set_elba_env.sh
> <xsl:if test="//params/env/param[@name='JAVA_OPTS_DB']">
> export JAVA_OPTS=<xsl:value-of select="//params/env/param[@name='JAVA_OPTS_DB']/@value"/>
> </xsl:if>
> 
> echo "  CONFIGURING MYSQL on $HOSTNAME"
> 
> #start mysql
>   mkdir -p $MYSQL_HOME/run
>   cp $OUTPUT_HOME/mysql_conf/my.cnf $MYSQL_HOME/my.cnf
> 
>   cd $MYSQL_HOME
>   bin/safe_mysqld --no-defaults --port=$MYSQL_PORT --datadir=$MYSQL_DATA_DIR --log=$MYSQL_ERR_LOG --pid-file=$MYSQL_PID_FILE --socket=$MYSQL_SOCKET --user=root &amp;
>   sleep 3
> 
> #set password
>   bin/mysqladmin --socket=$MYSQL_SOCKET --user=root password "$ROOT_PASSWORD"
> 
> #create database &amp; set privileges
>   ssh $HOSTNAME "
>     cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
>     source set_elba_env.sh
>     cd $MYSQL_HOME
>     echo 'CREATE DATABASE rubbos;'  | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD mysql
> 
>     echo 'GRANT ALL PRIVILEGES ON rubbos.* TO \"$ELBA_USER\"@\"%\" IDENTIFIED BY \"$ELBA_PASSWORD\", \"root\"@\"%\" IDENTIFIED BY \"$ROOT_PASSWORD\"; flush privileges; GRANT ALL PRIVILEGES ON rubbos.* TO \"$ELBA_USER\"@\"localhost\" IDENTIFIED BY \"$ELBA_PASSWORD\", \"root\"@\"localhost\" IDENTIFIED BY \"$ROOT_PASSWORD\"; flush privileges;' | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD mysql
>   "
> 
> #stop mysql
>   bin/mysqladmin --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD shutdown
> 
> # copy rubbos data files
>   tar xzf $SOFTWARE_HOME/$RUBBOS_DATA_TARBALL --directory=$MYSQL_HOME/data/rubbos
>   sleep 5
> 
> echo "  DONE CONFIGURING MYSQL on $HOSTNAME"
> 
> <file>
> <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>my.cnf<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/mysql_conf<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
> <content>
> [client]
> port = 3306
> 
> [mysqld]
> server-id=1
> </content>
> </file>
> 
> </xsl:template>
> 
> </xsl:stylesheet>
> 
diff ./MYSQLignition.xsl ../MYSQLignition.xsl
32c32
< bin/safe_mysqld --defaults-file="$MYSQL_HOME/my.cnf" --datadir=$MYSQL_DATA_DIR --pid-file=$MYSQL_PID_FILE --socket=$MYSQL_SOCKET --port=$MYSQL_PORT --user=root --log-bin=rubbos-bin --max_connections=1000 --log-slow-queries &amp;
---
> bin/safe_mysqld --defaults-file="$MYSQL_HOME/my.cnf" --datadir=$MYSQL_DATA_DIR --pid-file=$MYSQL_PID_FILE --socket=$MYSQL_SOCKET --port=$MYSQL_PORT --user=root --log-bin=rubbos-bin --max_connections=500 --log-slow-queries &amp;
35,44d34
< #clear some conflicting data
<   ssh localhost "
<     cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
<     source set_elba_env.sh
<     cd $MYSQL_HOME
<     echo 'delete from VISIT; delete from SERVER_HIT_BIN; delete from VISITOR; commit;'  | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD opentaps
<     echo 'DELETE FROM RUBBOS_COMMENTS WHERE DATE = '\''0000-00-00 00:00:00'\''; commit'  | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD opentaps
<     echo 'DELETE FROM RUBBOS_OLD_COMMENTS WHERE DATE = '\''0000-00-00 00:00:00'\''; commit'  | bin/mysql --socket=$MYSQL_SOCKET --user=root --password=$ROOT_PASSWORD opentaps
<   "
< 
diff ./MYSQLreset2.xsl ../MYSQLreset2.xsl
39c39
< bin/safe_mysqld --defaults-file="$MYSQL_HOME/my.cnf" --datadir=$MYSQL_DATA_DIR --pid-file=$MYSQL_PID_FILE --socket=$MYSQL_SOCKET --port=$MYSQL_PORT --user=root --log-bin=rubbos-bin --max_connections=1000 --log-slow-queries &amp;
---
> bin/safe_mysqld --defaults-file="$MYSQL_HOME/my.cnf" --datadir=$MYSQL_DATA_DIR --pid-file=$MYSQL_PID_FILE --socket=$MYSQL_SOCKET --port=$MYSQL_PORT --user=root --log-bin=rubbos-bin --max_connections=500 --log-slow-queries &amp;
diff ./MYSQLreset.xsl ../MYSQLreset.xsl
1,59c1,58
< <?xml version="1.0" ?>
< 
< <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
< 
< <xsl:output method="xml" indent="yes"/>
< 
< <xsl:template match="@*|node()">
< <xsl:copy>
< <xsl:apply-templates select="@*|node()"/>
< </xsl:copy>
< </xsl:template>
< 
< <xsl:template match="//argshere[@idtype='db_server' and @actype='reset' and @type='current']"> &amp;</xsl:template>
< 
< <xsl:template match="//argshere[@idtype='db_server' and @actype='reset' and @type='pre-action']">
< <xsl:text> 
< </xsl:text>
< </xsl:template>
< 
< 
< <xsl:template match="//argshere[@idtype='db_server' and @actype='reset' and @type='post-action']"> 
< <xsl:text> 
< </xsl:text>
< </xsl:template>
< 
< <xsl:template match="//pastehere[@id='../templates/DeployScript/MYSQLreset.xsl']">
< #!/bin/bash
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< <xsl:if test="//params/env/param[@name='JAVA_OPTS_DB']">
< export JAVA_OPTS=<xsl:value-of select="//params/env/param[@name='JAVA_OPTS_DB']/@value"/>
< </xsl:if>
< 
< echo "  RESETING MYSQL on $HOSTNAME"
< # copy rubbos data files
< tar xzf $SOFTWARE_HOME/$OPENTAPS_RUBBOS_DATA_TARBALL --directory=$MYSQL_HOME/data/opentaps
< tar xzf $SOFTWARE_HOME/$RUBBOS_DATA_TARBALL --directory=$MYSQL_HOME/data/rubbos
< 
< echo "  DONE RESETING MYSQL on $HOSTNAME"
< sleep 5
< 
< </xsl:template>
< 
< </xsl:stylesheet>
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> <?xml version="1.0" ?>
> 
> <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
> 
> <xsl:output method="xml" indent="yes"/>
> 
> <xsl:template match="@*|node()">
> <xsl:copy>
> <xsl:apply-templates select="@*|node()"/>
> </xsl:copy>
> </xsl:template>
> 
> <xsl:template match="//argshere[@idtype='db_server' and @actype='reset' and @type='current']"> &amp;</xsl:template>
> 
> <xsl:template match="//argshere[@idtype='db_server' and @actype='reset' and @type='pre-action']">
> <xsl:text> 
> </xsl:text>
> </xsl:template>
> 
> 
> <xsl:template match="//argshere[@idtype='db_server' and @actype='reset' and @type='post-action']"> 
> <xsl:text> 
> </xsl:text>
> </xsl:template>
> 
> <xsl:template match="//pastehere[@id='../templates/DeployScript/MYSQLreset.xsl']">
> #!/bin/bash
> 
> cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
> source set_elba_env.sh
> <xsl:if test="//params/env/param[@name='JAVA_OPTS_DB']">
> export JAVA_OPTS=<xsl:value-of select="//params/env/param[@name='JAVA_OPTS_DB']/@value"/>
> </xsl:if>
> 
> echo "  RESETING MYSQL on $HOSTNAME"
> # copy rubbos data files
> tar xzf $SOFTWARE_HOME/$RUBBOS_DATA_TARBALL --directory=$MYSQL_HOME/data/rubbos
> 
> echo "  DONE RESETING MYSQL on $HOSTNAME"
> sleep 5
> 
> </xsl:template>
> 
> </xsl:stylesheet>
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
Only in .: result
diff ./RUBBOS_CLIENTconfigure.xsl ../RUBBOS_CLIENTconfigure.xsl
250a251,253
> <xsl:when test="//params/dbmem-conf/param[@name='limitHighEndMem']/@value='true'"
>   >ssh $<xsl:value-of select="./@name"/>_HOST "$RUBBOS_HOME/bench/flush_cache 160000"       # database server
> </xsl:when>
350,355c353,361
<   <xsl:when test="./target[@type='pc600']"
<     >ssh $<xsl:value-of select="./@name"/>_HOST "$RUBBOS_HOME/bench/flush_cache 160000"       # database server
<   </xsl:when>
<   <xsl:otherwise
<     >ssh $<xsl:value-of select="./@name"/>_HOST "$RUBBOS_HOME/bench/flush_cache 880000"       # database server
<   </xsl:otherwise>
---
> <xsl:when test="./target[@type='pc600']"
>   >ssh $<xsl:value-of select="./@name"/>_HOST "$RUBBOS_HOME/bench/flush_cache 160000"       # database server
> </xsl:when>
> <xsl:when test="//params/dbmem-conf/param[@name='limitHighEndMem']/@value='true'"
>   >ssh $<xsl:value-of select="./@name"/>_HOST "$RUBBOS_HOME/bench/flush_cache 160000"       # database server
> </xsl:when>
> <xsl:otherwise
>   >ssh $<xsl:value-of select="./@name"/>_HOST "$RUBBOS_HOME/bench/flush_cache 880000"       # database server
> </xsl:otherwise>
370a377
> <xsl:if test="//params/rubbos-conf/param[contains(@name,'Monitor') and @value='true']">
394a402
> </xsl:if>
diff ./RUBBOSexecution.xsl ../RUBBOSexecution.xsl
64c64
< >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $POSTGRES_HOME/data/logs/*"
---
> >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $POSTGRES_HOME/data/logs/* $RUBBOS_TOP/postgres_lock-*"
67c67
<    sleep 30
---
>   sleep 15
70c70
< >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $RUBBOS_TOP/sar-* $RUBBOS_TOP/ps-* $RUBBOS_TOP/iostat-* $OPENTAPS_HOME/runtime/logs/*.log"
---
> >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $RUBBOS_TOP/sar-* $RUBBOS_TOP/ps-* $RUBBOS_TOP/iostat-*"
72,74c72
<   <xsl:if test="//params/rubbos-conf/param[@name='dstat']/@value='true'">
<     $OUTPUT_HOME/scripts/startdstat.sh
<  </xsl:if>
---
> 
122c120
<     scp $<xsl:value-of select="./@name"/>_HOST:/tmp/*.csv ./
---
>     scp $<xsl:value-of select="./@name"/>_HOST:$RUBBOS_TOP/postgres_lock-* ./
124,132d121
< 
< <xsl:for-each select="//instances/instance[@type='app_server']"> 
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/console.log ./<xsl:value-of select="./@name"/>_console_BO.log
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/JVMThreadInfo.log ./<xsl:value-of select="./@name"/>_JVMThreadInfo_BO.log
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/gc.log ./<xsl:value-of select="./@name"/>_gc_BO.log
< </xsl:for-each>
< 
< 
< 
139,141d127
<   <xsl:if test="//params/rubbos-conf/param[@name='dstat']/@value='true'">
<     $OUTPUT_HOME/scripts/stopdstat.sh
<  </xsl:if>
161c147
< >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $POSTGRES_HOME/data/logs/*"
---
> >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $POSTGRES_HOME/data/logs/* $RUBBOS_TOP/postgres_lock-*"
162a149,151
>   $OUTPUT_HOME/scripts/start_all.sh
>   sleep 15
> 
164c153
< >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $RUBBOS_TOP/sar-* $RUBBOS_TOP/ps-* $RUBBOS_TOP/iostat-* $OPENTAPS_HOME/runtime/logs/*.log"
---
> >  ssh $<xsl:value-of select="./@name"/>_HOST "rm -f $RUBBOS_TOP/sar-* $RUBBOS_TOP/ps-* $RUBBOS_TOP/iostat-*"
167,172d155
<   $OUTPUT_HOME/scripts/start_all.sh
<   sleep 30
< 
< <xsl:if test="//params/rubbos-conf/param[@name='dstat']/@value='true'">
<     $OUTPUT_HOME/scripts/startdstat.sh
<  </xsl:if>
193,195d175
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/console.log ./console_RW.log
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/JVMThreadInfo.log ./JVMThreadInfo_RW.log
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/gc.log ./gc_RW.log
223,227c203
<     scp $<xsl:value-of select="./@name"/>_HOST:/tmp/*.csv ./
< </xsl:for-each>
< <xsl:for-each select="//instances/instance[@type='app_server']"> 
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/console.log ./<xsl:value-of select="./@name"/>_console_RW.log
<      scp $<xsl:value-of select="./@name"/>_HOST:$OPENTAPS_HOME/runtime/logs/JVMThreadInfo.log ./<xsl:value-of select="./@name"/>_JVMThreadInfo_RW.log
---
>     scp $<xsl:value-of select="./@name"/>_HOST:$RUBBOS_TOP/postgres_lock-* ./
235,237d210
<   <xsl:if test="//params/rubbos-conf/param[@name='dstat']/@value='true'">
<     $OUTPUT_HOME/scripts/stopdstat.sh
<  </xsl:if>
278c251
< httpd_hostname = <xsl:value-of select="//instances/instance[@type='web_server']/target"/>-lan1
---
> httpd_hostname = <xsl:value-of select="//instances/instance[@type='web_server']/target"/>
284c257
<     -->cjdbc_hostname = <xsl:value-of select="//instances/instance[@type='cjdbc_server']/target"/>-lan3</xsl:when>
---
>     -->cjdbc_hostname = <xsl:value-of select="//instances/instance[@type='cjdbc_server']/target"/></xsl:when>
286c259
<     -->cjdbc_hostname = <xsl:value-of select="//instances/instance[@type='sequoia_server']/target"/>-lan3</xsl:when>
---
>     -->cjdbc_hostname = <xsl:value-of select="//instances/instance[@type='sequoia_server']/target"/></xsl:when>
299c272
< servlets_server = <xsl:value-of select="//instances/instance[@type='app_server']/target"/>-lan2
---
> servlets_server = <xsl:value-of select="//instances/instance[@type='app_server']/target"/>
301c274
< servlets_script_path = /rubbos/control
---
> servlets_script_path = /rubbos/servlet
308,309c281
< database_master_server = <xsl:value-of select="//instances/instance[@type='db_server']/target"/>-lan4
< database_server = <xsl:value-of select="//instances/instance[@type='db_server']/target"/>-lan4
---
> database_master_server = <xsl:value-of select="//instances/instance[@type='db_server']/target"/>
315c287
<   /><xsl:if test="$name != $first">,</xsl:if><xsl:value-of select="$name"/>-lan1</xsl:for-each>
---
>   /><xsl:if test="$name != $first">,</xsl:if><xsl:value-of select="$name"/></xsl:for-each>
377,378d348
< # Connection timedout settings
< connection_time_out_interval = <xsl:value-of select="//params/rubbos-conf/param[@name='connection_time_out_interval']/@value"/>
383,384c353,354
< monitoring_program = <xsl:value-of select="//params/env/param[@name='SYSSTAT_HOME']/@value"
<   />/sar
---
> #monitoring_program = <xsl:value-of select="//params/env/param[@name='SYSSTAT_HOME']/@value" />/sar
> monitoring_program = /usr/bin/sar
449,480d418
< <file>
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>startdstat.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <content>
< #!/bin/bash
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< 
< for i in<xsl:for-each select="//instances/instance[contains(@type, '_server') and @type!='control_server']"
< > "$<xsl:value-of select="./@name"/>_HOST"</xsl:for-each>
< do
<   ssh $i rm -rf /tmp/$i.csv
<   ssh $i <xsl:value-of select="//params/env/param[@name='RUBBOS_TOP']/@value"/>/dstat/dstat -m -r -c -d --no --output /tmp/$i.csv 1 &amp;
< done
< </content>
< </file>
< 
< <file>
< <xsl:text disable-output-escaping="yes">&lt;name id=&quot;</xsl:text>stopdstat.sh<xsl:text disable-output-escaping="yes">&quot; loc=&quot;</xsl:text><xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>/scripts<xsl:text disable-output-escaping="yes">&quot;/&gt;</xsl:text>
< <content>
< #!/bin/bash
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< 
< for i in<xsl:for-each select="//instances/instance[contains(@type, '_server') and @type!='control_server']"
< > "$<xsl:value-of select="./@name"/>_HOST"</xsl:for-each>
< do
<   ssh $i /sbin/fuser -k /tmp/$i.csv &amp;
< done
< </content>
< </file>
diff ./RUBBOSinstall.xsl ../RUBBOSinstall.xsl
40c40
< sudo make install
---
> #sudo make install
46,49d45
< # install dstat
< mkdir -p $RUBBOS_TOP/dstat
< tar xvf $DSTAT_TARBALL --directory=$RUBBOS_TOP
< echo "  DONE INSTALLING DSTAT on $HOSTNAME"
176c172,173
< sudo nice -n -1 $SYSSTAT_HOME/bin/sar -Bru -b -d -R -w -W -x ALL -n ALL $delay 0 &gt; ${sar_filename} &amp;
---
> #sudo nice -n -1 $SYSSTAT_HOME/bin/sar -Bru -b -d -R -w -W -x ALL -n ALL $delay 0 &gt; ${sar_filename} &amp;
> sudo nice -n -1 /usr/bin/sar -Bru -b -d -R -w -W -x ALL -n ALL $delay 0 &gt; ${sar_filename} &amp;
181c178,179
< sudo nice -n -1 $SYSSTAT_HOME/bin/iostat -dxtk $delay &gt; ${iostat_filename} &amp;
---
> #sudo nice -n -1 $SYSSTAT_HOME/bin/iostat -dxtk $delay &gt; ${iostat_filename} &amp;
> sudo nice -n -1 /usr/bin/iostat -dxtk $delay &gt; ${iostat_filename} &amp;
diff ./RUBBOS_SERVLETconfigure.xsl ../RUBBOS_SERVLETconfigure.xsl
70c70
< datasource.url          jdbc:cjdbc://<xsl:value-of select="//instances/instance[@type='cjdbc_server']/target"/>-lan3:<xsl:value-of select="//params/env/param[@name='CJDBC_PORT']/@value"/>/rubbos
---
> datasource.url          jdbc:cjdbc://<xsl:value-of select="//instances/instance[@type='cjdbc_server']/target"/>:<xsl:value-of select="//params/env/param[@name='CJDBC_PORT']/@value"/>/rubbos
74c74
< datasource.url          jdbc:sequoia://<xsl:value-of select="//instances/instance[@type='sequoia_server']/target"/>-lan3:<xsl:value-of select="//params/env/param[@name='SEQUOIA_PORT']/@value"/>/rubbos
---
> datasource.url          jdbc:sequoia://<xsl:value-of select="//instances/instance[@type='sequoia_server']/target"/>:<xsl:value-of select="//params/env/param[@name='SEQUOIA_PORT']/@value"/>/rubbos
78c78
< datasource.url          jdbc:postgresql://<xsl:value-of select="//instances/instance[@type='db_server']/target"/>-lan4:5432/rubbos
---
> datasource.url          jdbc:postgresql://<xsl:value-of select="//instances/instance[@type='db_server']/target"/>:5432/rubbos
82c82
< datasource.url          jdbc:mysql://<xsl:value-of select="//instances/instance[@type='db_server']/target"/>-lan4:<xsl:value-of select="//params/env/param[@name='MYSQL_PORT']/@value"/>/rubbos
---
> datasource.url          jdbc:mysql://<xsl:value-of select="//instances/instance[@type='db_server']/target"/>:<xsl:value-of select="//params/env/param[@name='MYSQL_PORT']/@value"/>/rubbos
89c89
< datasource.poolsize     100
---
> 
Only in ../: template_inemulab
diff ./TOMCATignition.xsl ../TOMCATignition.xsl
26c26
< echo "  STARTING opentaps on $HOSTNAME"
---
> echo "  STARTING TOMCAT on $HOSTNAME"
28,30c28,29
< cd $OPENTAPS_HOME
< sudo chmod +x startofbiz.sh
< ./startofbiz.sh
---
> cd $CATALINA_HOME/bin
> ./startup.sh
32c31
< echo "  opentaps IS RUNNING on $HOSTNAME"
---
> echo "  TOMCAT IS RUNNING on $HOSTNAME"
diff ./TOMCATinstall.xsl ../TOMCATinstall.xsl
1,69c1,52
< <?xml version="1.0" ?>
< 
< <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
< 
< <xsl:output method="xml" indent="yes"/>
< 
< <xsl:template match="@*|node()">
< <xsl:copy>
< <xsl:apply-templates select="@*|node()"/>
< </xsl:copy>
< </xsl:template>
< 
< <xsl:template match="//argshere[@idtype='app_server' and @actype='install' and @type='current']"></xsl:template>
< 
< <xsl:template match="//argshere[@idtype='app_server' and @actype='install' and @type='pre-action']"></xsl:template>
< 
< <xsl:template match="//argshere[@idtype='app_server' and @actype='install' and @type='post-action']"></xsl:template>
< 
< 
< <xsl:template match="//pastehere[@id='../templates/DeployScript/TOMCATinstall.xsl']">
< #!/bin/bash
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< 
< echo "  INSTALLING TOMCAT on $HOSTNAME"
< 
< mkdir -p $ELBA_TOP
< sudo chmod 755 $ELBA_TOP
< mkdir -p $RUBBOS_TOP
< chmod 755 $RUBBOS_TOP
< 
< unzip -u -q /mnt/softwares/$OPENTAPS_RUBBOS_ZIP -d $RUBBOS_TOP
< sleep 10
< cp -r /mnt/softwares/c-jdbc-driver.jar $OPENTAPS_HOME/framework/entity/lib/jdbc/
< cp -r $OUTPUT_HOME/tomcat_conf/entityengine.xml $OPENTAPS_HOME/framework/entity/config/entityengine.xml
< cp -r $OUTPUT_HOME/tomcat_conf/cache.properties $OPENTAPS_HOME/framework/base/config/cache.properties
< cp -r $OUTPUT_HOME/tomcat_conf/debug.properties $OPENTAPS_HOME/framework/base/config/debug.properties
< cp -r $OUTPUT_HOME/tomcat_conf/ofbiz-containers.xml $OPENTAPS_HOME/framework/base/config/ofbiz-containers.xml
< cp -r $OUTPUT_HOME/tomcat_conf/component-load.xml $OPENTAPS_HOME/hot-deploy/component-load.xml
< cp -r $OUTPUT_HOME/tomcat_conf/startofbiz.sh $OPENTAPS_HOME/
< cp -rf $OUTPUT_HOME/tomcat_conf/mysql.properties /mnt/elba/rubbos/RUBBoS/Servlets/mysql.properties
< 
< rm -rf $OPENTAPS_HOME/hot-deploy/rubbos
< cp -rf $OUTPUT_HOME/tomcat_conf/rubbos $OPENTAPS_HOME/hot-deploy/
< cp -r $OUTPUT_HOME/tomcat_conf/ofbiz-entity.jar $OPENTAPS_HOME/framework/entity/build/lib/ofbiz-entity.jar
< cp -r $OUTPUT_HOME/tomcat_conf/ofbiz-webapp.jar $OPENTAPS_HOME/framework/webapp/build/lib/ofbiz-webapp.jar
< 
< 
< tar xzf $SOFTWARE_HOME/$TOMCAT_TARBALL --directory=$RUBBOS_TOP
< tar xzf $SOFTWARE_HOME/$JAVA_TARBALL   --directory=$RUBBOS_TOP
< tar xzf $SOFTWARE_HOME/$J2EE_TARBALL   --directory=$RUBBOS_TOP
< tar xzf $SOFTWARE_HOME/$ANT_TARBALL    --directory=$RUBBOS_TOP
< 
< echo "  DONE INSTALLING TOMCAT on $HOSTNAME"
< 
< </xsl:template>
< </xsl:stylesheet>
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> <?xml version="1.0" ?>
> 
> <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
> 
> <xsl:output method="xml" indent="yes"/>
> 
> <xsl:template match="@*|node()">
> <xsl:copy>
> <xsl:apply-templates select="@*|node()"/>
> </xsl:copy>
> </xsl:template>
> 
> <xsl:template match="//argshere[@idtype='app_server' and @actype='install' and @type='current']"></xsl:template>
> 
> <xsl:template match="//argshere[@idtype='app_server' and @actype='install' and @type='pre-action']"></xsl:template>
> 
> <xsl:template match="//argshere[@idtype='app_server' and @actype='install' and @type='post-action']"></xsl:template>
> 
> 
> <xsl:template match="//pastehere[@id='../templates/DeployScript/TOMCATinstall.xsl']">
> #!/bin/bash
> 
> cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
> source set_elba_env.sh
> 
> echo "  INSTALLING TOMCAT on $HOSTNAME"
> 
> mkdir -p $ELBA_TOP
> chmod 755 $ELBA_TOP
> mkdir -p $RUBBOS_TOP
> chmod 755 $RUBBOS_TOP
> 
> tar xzf $SOFTWARE_HOME/$TOMCAT_TARBALL --directory=$RUBBOS_TOP
> tar xzf $SOFTWARE_HOME/$JAVA_TARBALL   --directory=$RUBBOS_TOP
> tar xzf $SOFTWARE_HOME/$J2EE_TARBALL   --directory=$RUBBOS_TOP
> tar xzf $SOFTWARE_HOME/$ANT_TARBALL    --directory=$RUBBOS_TOP
> 
> echo "  DONE INSTALLING TOMCAT on $HOSTNAME"
> 
> </xsl:template>
> </xsl:stylesheet>
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
diff ./TOMCATstop.xsl ../TOMCATstop.xsl
29,31c29,30
< cd $OPENTAPS_HOME
< chmod +x stopofbiz.sh
< ./stopofbiz.sh
---
> cd $CATALINA_HOME/bin
> ./shutdown.sh
diff ./WEBconfigure.xsl ../WEBconfigure.xsl
32,37d31
< #cp -r $WORK_HOME/apache_files/rubbos_html $HTTPD_HOME/htdocs/rubbos
< unzip -o /mnt/softwares/Servlet_HTML.zip -d $HTTPD_HOME/htdocs/rubbos
< mkdir $HTTPD_HOME/htdocs/opentaps_images
< cp $OUTPUT_HOME/apache_conf/opentaps_logo.png $HTTPD_HOME/htdocs/opentaps_images/
< cp $OUTPUT_HOME/apache_conf/RUBBoS_logo.jpg $HTTPD_HOME/htdocs/opentaps_images/
< 
1109c1103
< JkMount     /*/control/* worker1
---
> JkMount     /*/servlet/* worker1
1193c1187
< worker.<xsl:value-of select="./@name"/>.host=<xsl:value-of select="./target"/>-lan2
---
> worker.<xsl:value-of select="./@name"/>.host=<xsl:value-of select="./target"/>
1195a1190,1194
> worker.<xsl:value-of select="./@name"/>.connection_pool_timeout=600
> worker.<xsl:value-of select="./@name"/>.socket_timeout=60
> worker.<xsl:value-of select="./@name"/>.socket_connect_timeout=100000
> worker.<xsl:value-of select="./@name"/>.connection_pool_size=<xsl:value-of select="//params/tomcat-conf/param[@name='maxSpareThreads']/@value"/>
> worker.<xsl:value-of select="./@name"/>.connection_acquire_timeout=50000
diff ./WEBinstall.xsl ../WEBinstall.xsl
1,57c1,60
< <?xml version="1.0" ?>
< 
< <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
< 
< <xsl:output method="xml" indent="yes"/>
< 
< <xsl:template match="@*|node()">
< <xsl:copy>
< <xsl:apply-templates select="@*|node()"/>
< </xsl:copy>
< </xsl:template>
< 
< <xsl:template match="//argshere[@idtype='web_server' and @actype='install' and @type='current']"></xsl:template>
< 
< <xsl:template match="//argshere[@idtype='web_server' and @actype='install' and @type='pre-action']"></xsl:template>
< 
< <xsl:template match="//argshere[@idtype='web_server' and @actype='install' and @type='post-action']"></xsl:template>
< 
< 
< <xsl:template match="//pastehere[@id='../templates/DeployScript/WEBinstall.xsl']">
< #!/bin/bash
< 
< cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
< source set_elba_env.sh
< 
< echo "  INSTALLING APACHE on $HOSTNAME"
< 
< mkdir -p $ELBA_TOP
< chmod 755 $ELBA_TOP
< mkdir -p $RUBBOS_TOP
< chmod 755 $RUBBOS_TOP
< 
< # apache
< tar zxf $SOFTWARE_HOME/$HTTPD_TARBALL --directory=$RUBBOS_TOP 
< cd $HTTPD_INSTALL_FILES 
< #./configure --prefix=$HTTPD_HOME --enable-module=so --enable-so
< # --enable-mods-shared=all 
< ./configure --prefix=$HTTPD_HOME --enable-module=so --enable-so --with-mpm=worker
< make 
< make install 
< 
< # mod jk
< tar zxf $SOFTWARE_HOME/$MOD_JK_TARBALL --directory=$RUBBOS_TOP 
< tar zxf $SOFTWARE_HOME/$JAVA_TARBALL --directory=$RUBBOS_TOP
< #cd $MOD_JK_INSTALL_FILES/jk/native2
< #./configure --with-apxs2=$HTTPD_HOME/bin/apxs --enable-jni --with-java-home=$JAVA_HOME
< #make
< #make install-apxs 
< cd $MOD_JK_INSTALL_FILES/jk/native
< ./configure --with-apxs=$HTTPD_HOME/bin/apxs
< make
< make install 
< 
< echo "  APACHE IS INSTALLED on $HOSTNAME"
< </xsl:template>
< 
< </xsl:stylesheet>
---
> <?xml version="1.0" ?>
> 
> <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
> 
> <xsl:output method="xml" indent="yes"/>
> 
> <xsl:template match="@*|node()">
> <xsl:copy>
> <xsl:apply-templates select="@*|node()"/>
> </xsl:copy>
> </xsl:template>
> 
> <xsl:template match="//argshere[@idtype='web_server' and @actype='install' and @type='current']"></xsl:template>
> 
> <xsl:template match="//argshere[@idtype='web_server' and @actype='install' and @type='pre-action']"></xsl:template>
> 
> <xsl:template match="//argshere[@idtype='web_server' and @actype='install' and @type='post-action']"></xsl:template>
> 
> 
> <xsl:template match="//pastehere[@id='../templates/DeployScript/WEBinstall.xsl']">
> #!/bin/bash
> 
> cd <xsl:value-of select="//params/env/param[@name='OUTPUT_HOME']/@value"/>
> source set_elba_env.sh
> 
> echo "  INSTALLING APACHE on $HOSTNAME"
> 
> mkdir -p $ELBA_TOP
> chmod 755 $ELBA_TOP
> mkdir -p $RUBBOS_TOP
> chmod 755 $RUBBOS_TOP
> 
> # apache
> tar zxf $SOFTWARE_HOME/$HTTPD_TARBALL --directory=$RUBBOS_TOP 
> cd $HTTPD_INSTALL_FILES 
> #./configure --prefix=$HTTPD_HOME --enable-module=so --enable-so
> # --enable-mods-shared=all 
> export LDFLAGS="-L/lib64 -L/usr/lib64"
> ./configure --prefix=$HTTPD_HOME --enable-module=so --enable-so --with-mpm=worker
> make 
> make install 
> 
> # mod jk
> tar zxf $SOFTWARE_HOME/$MOD_JK_TARBALL --directory=$RUBBOS_TOP 
> tar zxf $SOFTWARE_HOME/$JAVA_TARBALL --directory=$RUBBOS_TOP
> #cd $MOD_JK_INSTALL_FILES/jk/native2
> #./configure --with-apxs2=$HTTPD_HOME/bin/apxs --enable-jni --with-java-home=$JAVA_HOME
> #make
> #make install-apxs 
> #cd $MOD_JK_INSTALL_FILES/jk/native
> cd $MOD_JK_INSTALL_FILES/native
> #./configure --with-apxs=$HTTPD_HOME/bin/apxs --enable-jni --with-java-home=$JAVA_HOME
> ./configure --with-apxs=$HTTPD_HOME/bin/apxs
> make
> make install 
> 
> echo "  APACHE IS INSTALLED on $HOSTNAME"
> </xsl:template>
> 
> </xsl:stylesheet>
